/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  CompleteAddress,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  FieldLike,
  Wallet,
} from "@aztec/aztec.js";
import { Fr, Point } from "@aztec/foundation/fields";
import { AztecRPC, PublicKey } from "@aztec/types";
import { ContractAbi } from "@aztec/foundation/abi";
import TokenBridgeContractAbiJson from "../../../aztec-contracts/token_bridge/target/TokenBridge.json" assert { type: "json" };
export const TokenBridgeContractAbi = TokenBridgeContractAbiJson as ContractAbi;

/**
 * Type-safe interface for contract TokenBridge;
 */
export class TokenBridgeContract extends ContractBase {
  private constructor(
    /** The deployed contract's complete address. */
    completeAddress: CompleteAddress,
    /** The wallet. */
    wallet: Wallet
  ) {
    super(completeAddress, TokenBridgeContractAbi, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet
  ) {
    const extendedContractData = await wallet.getExtendedContractData(address);
    if (extendedContractData === undefined) {
      throw new Error("Contract " + address.toString() + " is not deployed");
    }
    return new TokenBridgeContract(
      extendedContractData.getCompleteAddress(),
      wallet
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(rpc: AztecRPC, token: { address: FieldLike }) {
    return new DeployMethod<TokenBridgeContract>(
      Point.ZERO,
      rpc,
      TokenBridgeContractAbi,
      Array.from(arguments).slice(1)
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    rpc: AztecRPC,
    publicKey: PublicKey,
    token: { address: FieldLike }
  ) {
    return new DeployMethod<TokenBridgeContract>(
      publicKey,
      rpc,
      TokenBridgeContractAbi,
      Array.from(arguments).slice(2)
    );
  }

  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return TokenBridgeContractAbi;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** _assert_token_is_same(token: field) */
    _assert_token_is_same: ((token: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** _call_mint_on_token(amount: field, secret_hash: field) */
    _call_mint_on_token: ((
      amount: FieldLike,
      secret_hash: FieldLike
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** claim_private(secret_hash_for_redeeming_minted_notes: field, amount: field, canceller: struct, msg_key: field, secret_for_L1_to_L2_message_consumption: field) */
    claim_private: ((
      secret_hash_for_redeeming_minted_notes: FieldLike,
      amount: FieldLike,
      canceller: { address: FieldLike },
      msg_key: FieldLike,
      secret_for_L1_to_L2_message_consumption: FieldLike
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** claim_public(to: struct, amount: field, canceller: struct, msg_key: field, secret: field) */
    claim_public: ((
      to: { address: FieldLike },
      amount: FieldLike,
      canceller: { address: FieldLike },
      msg_key: FieldLike,
      secret: FieldLike
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** exit_to_l1_private(token: struct, recipient: struct, amount: field, callerOnL1: struct, nonce: field) */
    exit_to_l1_private: ((
      token: { address: FieldLike },
      recipient: { address: FieldLike },
      amount: FieldLike,
      callerOnL1: { address: FieldLike },
      nonce: FieldLike
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** exit_to_l1_public(recipient: struct, amount: field, callerOnL1: struct, nonce: field) */
    exit_to_l1_public: ((
      recipient: { address: FieldLike },
      amount: FieldLike,
      callerOnL1: { address: FieldLike },
      nonce: FieldLike
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;
  };
}
